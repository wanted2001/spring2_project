package com.ezen.www.controller;


import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ezen.www.domain.AuthVO;
import com.ezen.www.domain.UserVO;
import com.ezen.www.service.UserService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/user/**")
@Controller
@RequiredArgsConstructor
public class UserController {
	
	private final UserService usv;
	/* private final BCryptPasswordEncoder bcEncoder; */
	private final BCryptPasswordEncoder bcEncoder;
	
	
	//controller mapping과 jsp가 같으면 void가 가능
	@GetMapping("/register/")
	public void register() {
		
	}
	
	@PostMapping("/register/")
	public String register(UserVO uvo) {
		log.info(">> uvo >> {}",uvo);
		uvo.setPwd(bcEncoder.encode(uvo.getPwd()));
		int isOk = usv.register(uvo);
		return "index";
	}
	
	@GetMapping("/login")
	public void login() {}
	
	@PostMapping("/login")
	public String loginPost(HttpServletRequest request, RedirectAttributes re) {
		//로그인 실패시 다시 로그인 페이지로 돌아와 오류 메세지 전송
		//다시 로그인 유도
		log.info(">>> errcon >> {}",request.getAttribute("errMsg"));
		re.addAttribute("email",request.getAttribute("email"));
		re.addAttribute("errMsg",request.getAttribute("errMsg"));
		
		return "redirect:/user/login";
		
	}
	
	@GetMapping("/userList")
	public String userList(UserVO uvo, Model m) {
		List<UserVO> ulist = usv.getList();
		m.addAttribute("ulist",ulist);
		return "/user/userList";
	}
	
	private void logout(HttpServletRequest request , HttpServletResponse response) {
		Authentication authentication = 
				SecurityContextHolder
				.getContext()
				.getAuthentication();
		
		new SecurityContextLogoutHandler()
		.logout(request,response, authentication);
	}
	
	@GetMapping("/userModify")
	public void modify() {}
	
	
	@PostMapping("/userModify")
	public String modify(UserVO uvo,HttpServletRequest request , HttpServletResponse response) {
		if(uvo.getPwd() == null || uvo.getPwd().length() == 0) {
			Authentication authentication = (Authentication) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			UserVO secUvo = (UserVO)authentication;
			uvo.setPwd(secUvo.getPwd());
		}else {
			String setPwd = bcEncoder.encode(uvo.getPwd());
			uvo.setPwd(setPwd);
		}
		log.info("uvo >> {}",uvo);
		usv.modify(uvo);
		logout(request, response);
		return "redirect:/";
	}
	
	@GetMapping("/delete/{email}")
	public String delete(@RequestParam(value="email", required=false)String email) {
		log.info("email >> {}",email);
		int isOk = usv.delete(email);
		return "redirect:/user/login";
	}
	
	@GetMapping("/check")
	public void check(@RequestParam(value="name",required = false)String name) {
		log.info("name >> {}",name);
	}
	
}
